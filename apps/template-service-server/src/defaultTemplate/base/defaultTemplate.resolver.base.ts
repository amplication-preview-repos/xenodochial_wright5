/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DefaultTemplate } from "./DefaultTemplate";
import { DefaultTemplateCountArgs } from "./DefaultTemplateCountArgs";
import { DefaultTemplateFindManyArgs } from "./DefaultTemplateFindManyArgs";
import { DefaultTemplateFindUniqueArgs } from "./DefaultTemplateFindUniqueArgs";
import { CreateDefaultTemplateArgs } from "./CreateDefaultTemplateArgs";
import { UpdateDefaultTemplateArgs } from "./UpdateDefaultTemplateArgs";
import { DeleteDefaultTemplateArgs } from "./DeleteDefaultTemplateArgs";
import { DefaultTemplateService } from "../defaultTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DefaultTemplate)
export class DefaultTemplateResolverBase {
  constructor(
    protected readonly service: DefaultTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "read",
    possession: "any",
  })
  async _defaultTemplatesMeta(
    @graphql.Args() args: DefaultTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DefaultTemplate])
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "read",
    possession: "any",
  })
  async defaultTemplates(
    @graphql.Args() args: DefaultTemplateFindManyArgs
  ): Promise<DefaultTemplate[]> {
    return this.service.defaultTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DefaultTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "read",
    possession: "own",
  })
  async defaultTemplate(
    @graphql.Args() args: DefaultTemplateFindUniqueArgs
  ): Promise<DefaultTemplate | null> {
    const result = await this.service.defaultTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DefaultTemplate)
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "create",
    possession: "any",
  })
  async createDefaultTemplate(
    @graphql.Args() args: CreateDefaultTemplateArgs
  ): Promise<DefaultTemplate> {
    return await this.service.createDefaultTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DefaultTemplate)
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "update",
    possession: "any",
  })
  async updateDefaultTemplate(
    @graphql.Args() args: UpdateDefaultTemplateArgs
  ): Promise<DefaultTemplate | null> {
    try {
      return await this.service.updateDefaultTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DefaultTemplate)
  @nestAccessControl.UseRoles({
    resource: "DefaultTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteDefaultTemplate(
    @graphql.Args() args: DeleteDefaultTemplateArgs
  ): Promise<DefaultTemplate | null> {
    try {
      return await this.service.deleteDefaultTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
