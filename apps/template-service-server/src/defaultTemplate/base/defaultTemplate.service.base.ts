/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DefaultTemplate as PrismaDefaultTemplate,
} from "@prisma/client";

export class DefaultTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DefaultTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.defaultTemplate.count(args);
  }

  async defaultTemplates<T extends Prisma.DefaultTemplateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DefaultTemplateFindManyArgs>
  ): Promise<PrismaDefaultTemplate[]> {
    return this.prisma.defaultTemplate.findMany<Prisma.DefaultTemplateFindManyArgs>(
      args
    );
  }
  async defaultTemplate<T extends Prisma.DefaultTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DefaultTemplateFindUniqueArgs>
  ): Promise<PrismaDefaultTemplate | null> {
    return this.prisma.defaultTemplate.findUnique(args);
  }
  async createDefaultTemplate<T extends Prisma.DefaultTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DefaultTemplateCreateArgs>
  ): Promise<PrismaDefaultTemplate> {
    return this.prisma.defaultTemplate.create<T>(args);
  }
  async updateDefaultTemplate<T extends Prisma.DefaultTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DefaultTemplateUpdateArgs>
  ): Promise<PrismaDefaultTemplate> {
    return this.prisma.defaultTemplate.update<T>(args);
  }
  async deleteDefaultTemplate<T extends Prisma.DefaultTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DefaultTemplateDeleteArgs>
  ): Promise<PrismaDefaultTemplate> {
    return this.prisma.defaultTemplate.delete(args);
  }
}
