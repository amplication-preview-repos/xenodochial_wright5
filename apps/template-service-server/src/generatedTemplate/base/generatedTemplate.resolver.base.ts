/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GeneratedTemplate } from "./GeneratedTemplate";
import { GeneratedTemplateCountArgs } from "./GeneratedTemplateCountArgs";
import { GeneratedTemplateFindManyArgs } from "./GeneratedTemplateFindManyArgs";
import { GeneratedTemplateFindUniqueArgs } from "./GeneratedTemplateFindUniqueArgs";
import { CreateGeneratedTemplateArgs } from "./CreateGeneratedTemplateArgs";
import { UpdateGeneratedTemplateArgs } from "./UpdateGeneratedTemplateArgs";
import { DeleteGeneratedTemplateArgs } from "./DeleteGeneratedTemplateArgs";
import { Template } from "../../template/base/Template";
import { GeneratedTemplateService } from "../generatedTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GeneratedTemplate)
export class GeneratedTemplateResolverBase {
  constructor(
    protected readonly service: GeneratedTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "read",
    possession: "any",
  })
  async _generatedTemplatesMeta(
    @graphql.Args() args: GeneratedTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GeneratedTemplate])
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "read",
    possession: "any",
  })
  async generatedTemplates(
    @graphql.Args() args: GeneratedTemplateFindManyArgs
  ): Promise<GeneratedTemplate[]> {
    return this.service.generatedTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GeneratedTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "read",
    possession: "own",
  })
  async generatedTemplate(
    @graphql.Args() args: GeneratedTemplateFindUniqueArgs
  ): Promise<GeneratedTemplate | null> {
    const result = await this.service.generatedTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GeneratedTemplate)
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "create",
    possession: "any",
  })
  async createGeneratedTemplate(
    @graphql.Args() args: CreateGeneratedTemplateArgs
  ): Promise<GeneratedTemplate> {
    return await this.service.createGeneratedTemplate({
      ...args,
      data: {
        ...args.data,

        template: args.data.template
          ? {
              connect: args.data.template,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GeneratedTemplate)
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "update",
    possession: "any",
  })
  async updateGeneratedTemplate(
    @graphql.Args() args: UpdateGeneratedTemplateArgs
  ): Promise<GeneratedTemplate | null> {
    try {
      return await this.service.updateGeneratedTemplate({
        ...args,
        data: {
          ...args.data,

          template: args.data.template
            ? {
                connect: args.data.template,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneratedTemplate)
  @nestAccessControl.UseRoles({
    resource: "GeneratedTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteGeneratedTemplate(
    @graphql.Args() args: DeleteGeneratedTemplateArgs
  ): Promise<GeneratedTemplate | null> {
    try {
      return await this.service.deleteGeneratedTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneratedTemplate)
  async uploadGeneratedImage(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: GeneratedTemplateFindUniqueArgs
  ): Promise<GeneratedTemplate> {
    return await this.service.uploadGeneratedImage(args, file);
  }

  @graphql.Mutation(() => GeneratedTemplate)
  async deleteGeneratedImage(
    @graphql.Args()
    args: GeneratedTemplateFindUniqueArgs
  ): Promise<GeneratedTemplate> {
    return await this.service.deleteGeneratedImage(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Template, {
    nullable: true,
    name: "template",
  })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async getTemplate(
    @graphql.Parent() parent: GeneratedTemplate
  ): Promise<Template | null> {
    const result = await this.service.getTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
