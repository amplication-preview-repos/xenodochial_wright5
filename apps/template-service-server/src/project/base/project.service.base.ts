/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Project as PrismaProject,
  Template as PrismaTemplate,
  User as PrismaUser,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ProjectServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ProjectCountArgs, "select">): Promise<number> {
    return this.prisma.project.count(args);
  }

  async projects<T extends Prisma.ProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindManyArgs>
  ): Promise<PrismaProject[]> {
    return this.prisma.project.findMany<Prisma.ProjectFindManyArgs>(args);
  }
  async project<T extends Prisma.ProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindUniqueArgs>
  ): Promise<PrismaProject | null> {
    return this.prisma.project.findUnique(args);
  }
  async createProject<T extends Prisma.ProjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectCreateArgs>
  ): Promise<PrismaProject> {
    return this.prisma.project.create<T>(args);
  }
  async updateProject<T extends Prisma.ProjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUpdateArgs>
  ): Promise<PrismaProject> {
    return this.prisma.project.update<T>(args);
  }
  async deleteProject<T extends Prisma.ProjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectDeleteArgs>
  ): Promise<PrismaProject> {
    return this.prisma.project.delete(args);
  }

  async uploadLogo<T extends Prisma.ProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProject> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "logo";
    const logo = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.project.update({
      where: args.where,

      data: {
        logo: logo as InputJsonValue,
      },
    });
  }

  async downloadLogo<T extends Prisma.ProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindUniqueArgs>
  ): Promise<FileDownload> {
    const { logo } = await this.prisma.project.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      logo as unknown as LocalStorageFile
    );
  }

  async deleteLogo<T extends Prisma.ProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindUniqueArgs>
  ): Promise<PrismaProject> {
    const { logo } = await this.prisma.project.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      logo as unknown as LocalStorageFile
    );

    return await this.prisma.project.update({
      where: args.where,

      data: {
        logo: Prisma.DbNull,
      },
    });
  }

  async findTemplates(
    parentId: string,
    args: Prisma.TemplateFindManyArgs
  ): Promise<PrismaTemplate[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .templates(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.project
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
